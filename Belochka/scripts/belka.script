local input_right = hash("right")
local input_left = hash("left")
local move_acceleration = 4000
local max_speed = 1000
local gravity = -1000
local obstacle = hash("obstacle")

function init(self)
	msg.post(".", "acquire_input_focus")
	self.velocity = vmath.vector3(0, 0, 0)
	self.move_input = 0
	self.ground_contact = false
end

function update(self, dt)
	-- определяем нужную скорость, основываясь на вводе
	local target_speed = self.move_input * max_speed
	-- вычисляем разницу между нужной скоростью и текущей
	local speed_dif = target_speed - self.velocity.x
	-- определяем направление ускорения
	local acceleration = vmath.vector3(0, gravity, 0)
	-- направляем скорость по двум осям
	if speed_dif ~= 0 then
		if speed_dif < 0 then
			acceleration.x = -move_acceleration
		else
			acceleration.x = move_acceleration
		end
	end
	-- высчитываем изменение velocity за этот кадр, считаем через переменную dv (delta-velocity) 
	local dv = acceleration * dt
	-- проверяем, не выходит ли разница скоростей за нужную
	if math.abs(dv.x) > math.abs(speed_dif) then
		-- чтобы не выёбывалась
		dv.x = speed_dif
	end
	-- сохраняем текущую скорость на всякий
	local v0 = self.velocity
	-- высчитываем новую скорость, основываясь на её изменении
	self.velocity = self.velocity + dv
	-- высчитываем перемещение за этот кадр, интегрируя скорость
	local dx = (v0 + self.velocity) * dt * 0.5
	-- и применяем это к персонажу игрока!!!!
	go.set_position(go.get_position() + dx)
	-- собираем коррекции нормалей для коллизии в векторе для оптимизации 
	self.corrections = vmath.vector3()
end

-- функция для коллизии персонажа с уровнем
local function handle_obstacle_contact(self, normal, distance)
	-- проецируем вектор коррекции (нулевой вектор для первой точки соприкосновения) на нормаль контакта
	local proj = vmath.dot(self.corrections, normal)
	-- вычисляем компенсацию, которую мы должны сделать для этой точки соприкосновения
	local comp = (distance - proj) * normal 
	-- добавляем это к корректирующему вектору
	self.corrections = self.corrections + comp
	-- применяем компенсацию к персонажу
	go.set_position(go.get_position() + comp)
	-- проверяем, достаточно ли точек нормалей для того, чтобы убедиться в контакте персонажа с землёй
	-- 0.7 примерно равно 45 градусам отклонения от чистого вертикального направления
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	-- проецируем скорость на нормаль
	proj = vmath.dot(self.velocity, normal)
	-- если проекция отрицательна — значит часть скорости направлена в сторону точки контакта
	if proj < 0 then
		-- в таком случае убираем компонент
		self.velocity = self.velocity - proj * normal
	end
end

-- получем сообщение от движка box2d о коллизии и запускаем функцию для коллизии персонажа с уровнем
function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.group == obstacle then
			print("ебать")
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end

--function on_message(self, message_id, message, sender)
--	print("Received message:", message_id)
--	if message_id == hash("contact_point_response") then
--		print("Contact point response received")
--		-- обработка сообщения
--	end
--end


function on_input(self, action_id, action)
	if action_id == hash("right") then
		-- двигаем вправо
		self.move_input = action.value
	else
		if action_id == hash("left") then
			-- двигаем вправо
			self.move_input = -action.value
		end
	end
end